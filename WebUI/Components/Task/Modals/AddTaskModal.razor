@using Application.DTOs.Request.Task
@using Application.DTOs.Response
@using Domain.Entity.Tasks
@using Microsoft.IdentityModel.Tokens
<MudDialog >
    <DialogContent>
        <EditForm Model="CreateTaskModel" OnValidSubmit="CreateTaskAsync">
            <div class="text-md font-bold mt-4">ADD TASK</div>
            <div class="mt-4">
                <label for="first-name" class="block text-sm font-medium leading-6 text-gray-900">Task Title</label>
                <div class="mt-2">
                    <input  type="text" @bind="CreateTaskModel.Title" name="first-name" id="first-name" autocomplete="given-name" class="block w-full rounded-md border-0 py-1.5 text-gray-900 shadow-sm ring-1 ring-inset ring-gray-300 placeholder:text-gray-400 focus:ring-2 focus:ring-inset focus:ring-blue-600 sm:text-sm sm:leading-6">
                    <span class="text-red-600 text-xs">@_errorMessageTitle</span>
                </div>
            </div>
            <div>
                <label for="combobox" class="block text-sm font-medium leading-6 text-gray-900">Assigned to</label>
                <div class="relative mt-3">
                    <input @bind="SearchText" @bind:event="oninput" type="text" class="w-full rounded-md border-0 bg-white py-1.5 pl-3 pr-12 text-gray-900 shadow-sm ring-1 ring-inset ring-gray-300 focus:ring-2 focus:ring-inset focus:ring-blue-600 sm:text-sm sm:leading-6" role="combobox" aria-controls="options" aria-expanded="@(_isDropdownVisible ? "true" : "false")" @onfocus="ShowDropdown" @onblur="HideDropdown">
                    <button type="button" class="absolute inset-y-0 right-0 flex items-center rounded-r-md px-2 focus:outline-none" @onclick="ToggleDropdown">
                        <svg aria-hidden="true" class="w-6 h-6 text-blue-600 animate-spin dark:text-gray-600 fill-white" viewBox="0 0 100 101" fill="none" xmlns="http://www.w3.org/2000/svg">
                            <path d="M100 50.5908C100 78.2051 77.6142 100.591 50 100.591C22.3858 100.591 0 78.2051 0 50.5908C0 22.9766 22.3858 0.59082 50 0.59082C77.6142 0.59082 100 22.9766 100 50.5908ZM9.08144 50.5908C9.08144 73.1895 27.4013 91.5094 50 91.5094C72.5987 91.5094 90.9186 73.1895 90.9186 50.5908C90.9186 27.9921 72.5987 9.67226 50 9.67226C27.4013 9.67226 9.08144 27.9921 9.08144 50.5908Z" fill="currentColor"/>
                            <path d="M93.9676 39.0409C96.393 38.4038 97.8624 35.9116 97.0079 33.5539C95.2932 28.8227 92.871 24.3692 89.8167 20.348C85.8452 15.1192 80.8826 10.7238 75.2124 7.41289C69.5422 4.10194 63.2754 1.94025 56.7698 1.05124C51.7666 0.367541 46.6976 0.446843 41.7345 1.27873C39.2613 1.69328 37.813 4.19778 38.4501 6.62326C39.0873 9.04874 41.5694 10.4717 44.0505 10.1071C47.8511 9.54855 51.7191 9.52689 55.5402 10.0491C60.8642 10.7766 65.9928 12.5457 70.6331 15.2552C75.2735 17.9648 79.3347 21.5619 82.5849 25.841C84.9175 28.9121 86.7997 32.2913 88.1811 35.8758C89.083 38.2158 91.5421 39.6781 93.9676 39.0409Z" fill="currentFill"/>
                        </svg>
                    </button>

                    @if (_isDropdownVisible)
                    {
                        <ul class="absolute z-10 mt-1 max-h-60 w-full overflow-auto rounded-md bg-white py-1 text-base shadow-lg ring-1 ring-black ring-opacity-5 focus:outline-none sm:text-sm" id="options" role="listbox">
                            @foreach (var item in FilteredItems)
                            {
                                <li class="relative cursor-default select-none py-2 pl-3 pr-9 text-gray-900" id="option-@item" role="option" @onclick="@((!selectedUsers.Contains(item) ? (() => SelectUser(item)) : null)!)">
                                    <span class="block truncate">@item.Name.ToUpper()</span>
                                    @if (selectedUsers.Contains(item))
                                    {
                                        <span class="absolute inset-y-0 right-0 flex items-center pr-4 text-blue-600">
                                            <svg class="h-5 w-5" viewBox="0 0 20 20" fill="currentColor" aria-hidden="true">
                                                <path fill-rule="evenodd" d="M16.704 4.153a.75.75 0 01.143 1.052l-8 10.5a.75.75 0 01-1.127.075l-4.5-4.5a.75.75 0 011.06-1.06l3.894 3.893 7.48-9.817a.75.75 0 011.05-.143z" clip-rule="evenodd"/>
                                            </svg>
                                        </span>
                                    }
                                </li>
                            }
                        </ul>
                    }
                </div>
                <span class="text-red-600 text-xs">@_errorMessageAssign</span>
                
            </div>
            <div class="flex mt-2">
                @foreach (var item in selectedUsers)
                {
                    <span @onclick="() => RemoveUserFromAssignees(item)"  style="cursor: pointer" class="inline-flex h-6 w-6 items-center justify-center rounded-full bg-gray-500 mr-2">
                        <span class="text-xs font-medium leading-none text-white">@item.Name.ToUpper().First()@item.Name.ToUpper().Substring(1, 1)</span>
                    </span>
                }



            </div>
            <div class="flex justify-between mt-3  ">
                @if (statuses != null)
                {
                    <div class="w-full mr-2">
                        <label for="status" class="block text-sm font-medium leading-6 text-gray-900">Status</label>
                        <div class="mt-2">
                            <select id="status" autocomplete="country-name" class="block w-full rounded-md border-0 py-1.5 text-gray-900 shadow-sm ring-1 ring-inset ring-gray-300 focus:ring-2 focus:ring-inset focus:ring-blue-600 sm:max-w-xs sm:text-sm sm:leading-6" @onchange="OnStatusChanged">

                                @foreach (var status in statuses)
                                {
                                    <option value="@status.Id">@status.Name</option>
                                }
                            </select>
                        </div>
                    </div>
                }
                @if (priorities != null)
                {
                    <div class="w-full mr-2">
                        <label for="priority" class="block text-sm font-medium leading-6 text-gray-900">Priority</label>
                        <div class="mt-2">
                            <select id="priority" autocomplete="country-name" class="block w-full rounded-md border-0 py-1.5 text-gray-900 shadow-sm ring-1 ring-inset ring-gray-300 focus:ring-2 focus:ring-inset focus:ring-blue-600 sm:max-w-xs sm:text-sm sm:leading-6" @onchange="OnPriorityChanged">
                                @foreach (var priority in priorities)
                                {
                                    <option value="@priority.Id">@priority.Name</option>
                                }
                            </select>
                        </div>
                    </div>
                }

            </div>

            <div class="w-full mr-2 mt-3">
                <label for="first-name" class="block text-sm font-medium leading-6 text-gray-900">Due Data</label>
                <div class="mt-2">
                    <input @bind="CreateTaskModel.DueDate" type="date" min="@MinDate"  max="@MaxDate"  name="first-name" autocomplete="given-name" class="block w-full rounded-md border-0 py-1.5 text-gray-900 shadow-sm ring-1 ring-inset ring-gray-300 placeholder:text-gray-400 focus:ring-2 focus:ring-inset focus:ring-blue-600 sm:text-sm sm:leading-6">
                
                </div>
            </div>


        </EditForm>
       
    </DialogContent>
    <DialogActions>

        @if (isLoading)
        {
        <div class="mt-6 flex items-center justify-end gap-x-6 mr-4">
            <button disabled="disabled" @onclick="Cancel" type="button" class="text-sm font-semibold leading-6 text-gray-900">Cancel</button>
            <button @onclick="CreateTaskAsync" type="submit" class="rounded-md bg-blue-600 px-3 py-2 text-sm font-semibold text-white shadow-sm hover:bg-blue-500 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-blue-600">
                <svg width="20" height="20" fill="currentColor" class="mr-2 animate-spin" viewBox="0 0 1792 1792" xmlns="http://www.w3.org/2000/svg">
                    <path d="M526 1394q0 53-37.5 90.5t-90.5 37.5q-52 0-90-38t-38-90q0-53 37.5-90.5t90.5-37.5 90.5 37.5 37.5 90.5zm498 206q0 53-37.5 90.5t-90.5 37.5-90.5-37.5-37.5-90.5 37.5-90.5 90.5-37.5 90.5 37.5 37.5 90.5zm-704-704q0 53-37.5 90.5t-90.5 37.5-90.5-37.5-37.5-90.5 37.5-90.5 90.5-37.5 90.5 37.5 37.5 90.5zm1202 498q0 52-38 90t-90 38q-53 0-90.5-37.5t-37.5-90.5 37.5-90.5 90.5-37.5 90.5 37.5 37.5 90.5zm-964-996q0 66-47 113t-113 47-113-47-47-113 47-113 113-47 113 47 47 113zm1170 498q0 53-37.5 90.5t-90.5 37.5-90.5-37.5-37.5-90.5 37.5-90.5 90.5-37.5 90.5 37.5 37.5 90.5zm-640-704q0 80-56 136t-136 56-136-56-56-136 56-136 136-56 136 56 56 136zm530 206q0 93-66 158.5t-158 65.5q-93 0-158.5-65.5t-65.5-158.5q0-92 65.5-158t158.5-66q92 0 158 66t66 158z">
                    </path>
                </svg>
                Save
            </button>
        </div>
        }
        else
        {
        <div class="mt-6 flex items-center justify-end gap-x-6 mr-4">
            <button @onclick="Cancel" type="button" class="text-sm font-semibold leading-6 text-gray-900">Cancel</button>
            <button @onclick="CreateTaskAsync" type="submit" class="rounded-md bg-blue-600 px-3 py-2 text-sm font-semibold text-white shadow-sm hover:bg-blue-500 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-blue-600">Save</button>
        </div>
        }
    </DialogActions>
    
    
    
</MudDialog>

@code {
    [CascadingParameter] MudDialogInstance MudDialog { get; set; }

    void Submit() => MudDialog.Close(DialogResult.Ok(true));
    void Cancel() => MudDialog.Cancel();
    private string SearchText { get; set; }
    private GetUsersWithRolesResponseDTO SelectedUser { get; set; }
    private bool _isDropdownVisible { get; set; } = false;

    //Users
    private List<GetUsersWithRolesResponseDTO> users = new List<GetUsersWithRolesResponseDTO>();
  

    private List<GetUsersWithRolesResponseDTO> selectedUsers = new List<GetUsersWithRolesResponseDTO>();
    private List<string> selectedUsersId = new List<string>();
   

    private List<GetUsersWithRolesResponseDTO> FilteredItems => string.IsNullOrWhiteSpace(SearchText)
        ? users
        : users.Where(item => item.Name.Contains(SearchText, StringComparison.OrdinalIgnoreCase)).ToList();

    private void SelectUser(GetUsersWithRolesResponseDTO item)
    {
        selectedUsers.Add(item);
        selectedUsersId.Add(item.Id);
        
        SelectedUser = item;
        SearchText = "";
        _isDropdownVisible = false;
    }

    private void RemoveUserFromAssignees(GetUsersWithRolesResponseDTO item)
    {
        selectedUsers.Remove(item);
    }

    private void ShowDropdown()
    {
        _isDropdownVisible = true;
    }

    private void HideDropdown()
    {
        // Use a delay to allow the onClick event to be processed before hiding the dropdown
        Task.Delay(200).ContinueWith(_ =>
        {
            _isDropdownVisible = false;
            InvokeAsync(StateHasChanged);
        });
    }

    private void ToggleDropdown()
    {
        _isDropdownVisible = !_isDropdownVisible;
    }
    private IEnumerable<Status>? statuses;
    private IEnumerable<Priority>? priorities;
    protected override async Task OnInitializedAsync()
    {
        statuses = await statusService.GetStatusAsync();
        _selectedStatusId = statuses.First().Id.ToString();
        priorities = await priorityService.GetPrioritiesAsync();
        _selectedPriorityId = priorities.First().Id.ToString();
        users = await userService.GetUsersAsync();
        

    }
    
    //Status
    private string? _selectedStatusId;

    private void OnStatusChanged(ChangeEventArgs e)
    {
        _selectedStatusId = e.Value?.ToString();
    }

    //Priority
    private string? _selectedPriorityId;

    private void OnPriorityChanged(ChangeEventArgs e)
    {
        _selectedPriorityId = e.Value?.ToString();
    }

    #region Task

    private bool isLoading = false;
    private string? _errorMessageTitle="";
    private string? _errorMessageAssign="";
    public CreateTaskDTO CreateTaskModel = new CreateTaskDTO();
    // Date-related properties
    private DateTime TodayDate => DateTime.Now;
    private DateTime MinDate => DateTime.Now;
    private DateTime MaxDate => DateTime.Now.AddYears(1);
    [Parameter]
    public Func<Task> Callback { get; set; } // Callback function to refresh the task list
    
    private async Task CreateTaskAsync()
    {
        try
        {
            
            if (string.IsNullOrEmpty(CreateTaskModel.Title) && selectedUsers.IsNullOrEmpty() )
            {
                _errorMessageTitle = "Title Task is empty";
                _errorMessageAssign = "Select team members";

            }
            else if (string.IsNullOrEmpty(CreateTaskModel.Title))
            {
                _errorMessageTitle = "Title Task is empty";
            }
            else if (selectedUsers.IsNullOrEmpty())
            {
                _errorMessageAssign = "Select team members";
            }
            else
            {
                isLoading = true;

                var newTask = new CreateTaskDTO()
                {
                    Title = CreateTaskModel.Title,
                    PriorityId = Guid.Parse(_selectedPriorityId),
                    StatusId = Guid.Parse(_selectedStatusId),
                    assignees = selectedUsersId,
                    UserId = "7938c8c5-38a9-4e4d-86d4-1b5a6e63f267",
                    DueDate = DateTime.UtcNow
                };
            
                var response = await taskService.CreateTaskAsync(newTask);
                if (response.Flag)
                {
                    isLoading = false;
                    Snackbar.Add(@response.Message, Severity.Success);
                    MudDialog.Close(DialogResult.Ok(true));
                    await Callback(); // Refresh the task list
                
                }
                else
                {
                    Snackbar.Add(@response.Message, Severity.Error);
               
                }
               
            }
             
            
           

            
        }
        catch 
        {
           
        }
    }


    

    #endregion
}