<MudDialog >
    <DialogContent>
        <div class="text-md font-bold mt-4">ADD TASK</div>
        <div class="mt-4">
            <label for="first-name" class="block text-sm font-medium leading-6 text-gray-900">Task Title</label>
            <div class="mt-2">
                <input type="text" name="first-name" id="first-name" autocomplete="given-name" class="block w-full rounded-md border-0 py-1.5 text-gray-900 shadow-sm ring-1 ring-inset ring-gray-300 placeholder:text-gray-400 focus:ring-2 focus:ring-inset focus:ring-blue-600 sm:text-sm sm:leading-6">
            </div>
        </div>
        <div>
            <label for="combobox" class="block text-sm font-medium leading-6 text-gray-900">Assigned to</label>
            <div class="relative mt-2">
                <input @bind="SearchText" @bind:event="oninput" type="text" class="w-full rounded-md border-0 bg-white py-1.5 pl-3 pr-12 text-gray-900 shadow-sm ring-1 ring-inset ring-gray-300 focus:ring-2 focus:ring-inset focus:ring-blue-600 sm:text-sm sm:leading-6" role="combobox" aria-controls="options" aria-expanded="@(_isDropdownVisible ? "true" : "false")" @onfocus="ShowDropdown" @onblur="HideDropdown">
                <button type="button" class="absolute inset-y-0 right-0 flex items-center rounded-r-md px-2 focus:outline-none" @onclick="ToggleDropdown">
                    <svg class="h-5 w-5 text-gray-400" viewBox="0 0 20 20" fill="currentColor" aria-hidden="true">
                        <path fill-rule="evenodd" d="M10 3a.75.75 0 01.55.24l3.25 3.5a.75.75 0 11-1.1 1.02L10 4.852 7.3 7.76a.75.75 0 01-1.1-1.02l3.25-3.5A.75.75 0 0110 3zm-3.76 9.2a.75.75 0 011.06.04l2.7 2.908 2.7-2.908a.75.75 0 111.1 1.02l-3.25 3.5a.75.75 0 01-1.1 0l-3.25-3.5a.75.75 0 01.04-1.06z" clip-rule="evenodd" />
                    </svg>
                </button>

                @if (_isDropdownVisible)
                {
                    <ul class="absolute z-10 mt-1 max-h-60 w-full overflow-auto rounded-md bg-white py-1 text-base shadow-lg ring-1 ring-black ring-opacity-5 focus:outline-none sm:text-sm" id="options" role="listbox">
                        @foreach (var item in FilteredItems)
                        {
                            <li class="relative cursor-default select-none py-2 pl-3 pr-9 text-gray-900" id="option-@item" role="option" @onclick="() => SelectItem(item)">
                                <span class="block truncate">@item</span>
                                @if (selectedUserNames.Contains(item))
                                {
                                    <span class="absolute inset-y-0 right-0 flex items-center pr-4 text-blue-600">
                                        <svg class="h-5 w-5" viewBox="0 0 20 20" fill="currentColor" aria-hidden="true">
                                            <path fill-rule="evenodd" d="M16.704 4.153a.75.75 0 01.143 1.052l-8 10.5a.75.75 0 01-1.127.075l-4.5-4.5a.75.75 0 011.06-1.06l3.894 3.893 7.48-9.817a.75.75 0 011.05-.143z" clip-rule="evenodd" />
                                        </svg>
                                    </span>
                                }
                            </li>
                        }
                    </ul>
                }
            </div>
        </div>
        <div class="flex mt-2">
            @foreach (var item in selectedUserNames)
            {
                <span class="inline-flex h-6 w-6 items-center justify-center rounded-full bg-gray-500">
                    <span class="text-xs font-medium leading-none text-white">@item.ToUpper().First()@item.ToUpper().Substring(1,1)</span>
                </span>
            }
            
           

        </div>
        <div class="flex justify-between mt-2 ">
            <div class="w-full mr-2">
                <label for="country" class="block text-sm font-medium leading-6 text-gray-900">Country</label>
                <div class="mt-2">
                    <select id="country" name="country" autocomplete="country-name" class="block w-full rounded-md border-0 py-1.5 text-gray-900 shadow-sm ring-1 ring-inset ring-gray-300 focus:ring-2 focus:ring-inset focus:ring-blue-600 sm:max-w-xs sm:text-sm sm:leading-6">
                        <option>United States</option>
                        <option>Canada</option>
                        <option>Mexico</option>
                    </select>
                </div>
            </div>
            <div class="w-full mr-2">
                <label for="first-name" class="block text-sm font-medium leading-6 text-gray-900">Due Data</label>
                <div class="mt-2">
                    <input type="date" name="first-name"  autocomplete="given-name" class="block w-full rounded-md border-0 py-1.5 text-gray-900 shadow-sm ring-1 ring-inset ring-gray-300 placeholder:text-gray-400 focus:ring-2 focus:ring-inset focus:ring-blue-600 sm:text-sm sm:leading-6">
                </div>
            </div>
        </div>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel">Cancel</MudButton>
        <MudButton Color="Color.Primary" OnClick="Submit">Done</MudButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter] MudDialogInstance MudDialog { get; set; }

    void Submit() => MudDialog.Close(DialogResult.Ok(true));
    void Cancel() => MudDialog.Cancel();
    private string SearchText { get; set; }
    private string SelectedItem { get; set; }
    private bool _isDropdownVisible { get; set; } = false;

    private List<string> userNames = new List<string>
    {
        "Leslie Alexander",
        "Michael Smith",
        "Laura Johnson",
        "Tom Brown"
    };

    private List<string> selectedUserNames = new List<string>();
   

    private List<string> FilteredItems => string.IsNullOrWhiteSpace(SearchText)
        ? userNames
        : userNames.Where(item => item.Contains(SearchText, StringComparison.OrdinalIgnoreCase)).ToList();

    private void SelectItem(string item)
    {
        selectedUserNames.Add(item);
        
        SelectedItem = item;
        SearchText = "";
        _isDropdownVisible = false;
    }

    private void ShowDropdown()
    {
        _isDropdownVisible = true;
    }

    private void HideDropdown()
    {
        // Use a delay to allow the onClick event to be processed before hiding the dropdown
        Task.Delay(200).ContinueWith(_ =>
        {
            _isDropdownVisible = false;
            InvokeAsync(StateHasChanged);
        });
    }

    private void ToggleDropdown()
    {
        _isDropdownVisible = !_isDropdownVisible;
    }
}