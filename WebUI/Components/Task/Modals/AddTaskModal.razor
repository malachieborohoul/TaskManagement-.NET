@using Application.DTOs.Request.Task
@using Application.DTOs.Response
@using Domain.Entity.Tasks
@using Microsoft.IdentityModel.Tokens
<MudDialog >
    <DialogContent>
        <EditForm Model="CreateTaskModel" OnValidSubmit="CreateTaskAsync">
            <div class="text-md font-bold mt-4">ADD TASK</div>
            <div class="mt-4">
                <label for="first-name" class="block text-sm font-medium leading-6 text-gray-900">Task Title</label>
                <div class="mt-2">
                    <input  type="text" @bind="CreateTaskModel.Title" name="first-name" id="first-name" autocomplete="given-name" class="block w-full rounded-md border-0 py-1.5 text-gray-900 shadow-sm ring-1 ring-inset ring-gray-300 placeholder:text-gray-400 focus:ring-2 focus:ring-inset focus:ring-blue-600 sm:text-sm sm:leading-6">
                    <span class="text-red-600 text-xs">@_errorMessageTitle</span>
                </div>
            </div>
            <div>
                <label for="combobox" class="block text-sm font-medium leading-6 text-gray-900">Assigned to</label>
                <div class="relative mt-3">
                    <input @bind="SearchText" @bind:event="oninput" type="text" class="w-full rounded-md border-0 bg-white py-1.5 pl-3 pr-12 text-gray-900 shadow-sm ring-1 ring-inset ring-gray-300 focus:ring-2 focus:ring-inset focus:ring-blue-600 sm:text-sm sm:leading-6" role="combobox" aria-controls="options" aria-expanded="@(_isDropdownVisible ? "true" : "false")" @onfocus="ShowDropdown" @onblur="HideDropdown">
                    <button type="button" class="absolute inset-y-0 right-0 flex items-center rounded-r-md px-2 focus:outline-none" @onclick="ToggleDropdown">
                        <svg class="h-5 w-5 text-gray-400" viewBox="0 0 20 20" fill="currentColor" aria-hidden="true">
                            <path fill-rule="evenodd" d="M10 3a.75.75 0 01.55.24l3.25 3.5a.75.75 0 11-1.1 1.02L10 4.852 7.3 7.76a.75.75 0 01-1.1-1.02l3.25-3.5A.75.75 0 0110 3zm-3.76 9.2a.75.75 0 011.06.04l2.7 2.908 2.7-2.908a.75.75 0 111.1 1.02l-3.25 3.5a.75.75 0 01-1.1 0l-3.25-3.5a.75.75 0 01.04-1.06z" clip-rule="evenodd"/>
                        </svg>
                    </button>

                    @if (_isDropdownVisible)
                    {
                        <ul class="absolute z-10 mt-1 max-h-60 w-full overflow-auto rounded-md bg-white py-1 text-base shadow-lg ring-1 ring-black ring-opacity-5 focus:outline-none sm:text-sm" id="options" role="listbox">
                            @foreach (var item in FilteredItems)
                            {
                                <li class="relative cursor-default select-none py-2 pl-3 pr-9 text-gray-900" id="option-@item" role="option" @onclick="@((!selectedUsers.Contains(item) ? (() => SelectUser(item)) : null)!)">
                                    <span class="block truncate">@item.Name.ToUpper()</span>
                                    @if (selectedUsers.Contains(item))
                                    {
                                        <span class="absolute inset-y-0 right-0 flex items-center pr-4 text-blue-600">
                                            <svg class="h-5 w-5" viewBox="0 0 20 20" fill="currentColor" aria-hidden="true">
                                                <path fill-rule="evenodd" d="M16.704 4.153a.75.75 0 01.143 1.052l-8 10.5a.75.75 0 01-1.127.075l-4.5-4.5a.75.75 0 011.06-1.06l3.894 3.893 7.48-9.817a.75.75 0 011.05-.143z" clip-rule="evenodd"/>
                                            </svg>
                                        </span>
                                    }
                                </li>
                            }
                        </ul>
                    }
                </div>
                <span class="text-red-600 text-xs">@_errorMessageAssign</span>
                
            </div>
            <div class="flex mt-2">
                @foreach (var item in selectedUsers)
                {
                    <span class="inline-flex h-6 w-6 items-center justify-center rounded-full bg-gray-500 mr-2">
                        <span class="text-xs font-medium leading-none text-white">@item.Name.ToUpper().First()@item.Name.ToUpper().Substring(1, 1)</span>
                    </span>
                }



            </div>
            <div class="flex justify-between mt-3  ">
                @if (statuses != null)
                {
                    <div class="w-full mr-2">
                        <label for="status" class="block text-sm font-medium leading-6 text-gray-900">Status</label>
                        <div class="mt-2">
                            <select id="status" autocomplete="country-name" class="block w-full rounded-md border-0 py-1.5 text-gray-900 shadow-sm ring-1 ring-inset ring-gray-300 focus:ring-2 focus:ring-inset focus:ring-blue-600 sm:max-w-xs sm:text-sm sm:leading-6" @onchange="OnStatusChanged">

                                @foreach (var status in statuses)
                                {
                                    <option value="@status.Id">@status.Name</option>
                                }
                            </select>
                        </div>
                    </div>
                }
                @if (priorities != null)
                {
                    <div class="w-full mr-2">
                        <label for="priority" class="block text-sm font-medium leading-6 text-gray-900">Priority</label>
                        <div class="mt-2">
                            <select id="priority" autocomplete="country-name" class="block w-full rounded-md border-0 py-1.5 text-gray-900 shadow-sm ring-1 ring-inset ring-gray-300 focus:ring-2 focus:ring-inset focus:ring-blue-600 sm:max-w-xs sm:text-sm sm:leading-6" @onchange="OnPriorityChanged">
                                @foreach (var priority in priorities)
                                {
                                    <option value="@priority.Id">@priority.Name</option>
                                }
                            </select>
                        </div>
                    </div>
                }

            </div>

            <div class="w-full mr-2 mt-3">
                <label for="first-name" class="block text-sm font-medium leading-6 text-gray-900">Due Data</label>
                <div class="mt-2">
                    <input @bind="CreateTaskModel.DueDate" type="date" min="@MinDate"  max="@MaxDate"  name="first-name" autocomplete="given-name" class="block w-full rounded-md border-0 py-1.5 text-gray-900 shadow-sm ring-1 ring-inset ring-gray-300 placeholder:text-gray-400 focus:ring-2 focus:ring-inset focus:ring-blue-600 sm:text-sm sm:leading-6">
                
                </div>
            </div>

        </EditForm>
       
    </DialogContent>
    
    
    <DialogActions>
        @if (isLoading)
        {
            <MudSkeleton Animation="Animation.Wave"/>
        }
        else
        {
            <div class="flex">
                <MudButton OnClick="Cancel">Cancel</MudButton>
                <button @onclick="CreateTaskAsync" type="button" class="block rounded-md bg-blue-600 px-2 py-2 text-center text-xs font-semibold text-white shadow-sm hover:bg-blue-500 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-indigo-600">Create Task</button>

            </div>
        }
        

    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter] MudDialogInstance MudDialog { get; set; }

    void Submit() => MudDialog.Close(DialogResult.Ok(true));
    void Cancel() => MudDialog.Cancel();
    private string SearchText { get; set; }
    private GetUsersWithRolesResponseDTO SelectedUser { get; set; }
    private bool _isDropdownVisible { get; set; } = false;

    //Users
    private List<GetUsersWithRolesResponseDTO> users = new List<GetUsersWithRolesResponseDTO>();
  

    private List<GetUsersWithRolesResponseDTO> selectedUsers = new List<GetUsersWithRolesResponseDTO>();
    private List<string> selectedUsersId = new List<string>();
   

    private List<GetUsersWithRolesResponseDTO> FilteredItems => string.IsNullOrWhiteSpace(SearchText)
        ? users
        : users.Where(item => item.Name.Contains(SearchText, StringComparison.OrdinalIgnoreCase)).ToList();

    private void SelectUser(GetUsersWithRolesResponseDTO item)
    {
        selectedUsers.Add(item);
        selectedUsersId.Add(item.Id);
        
        SelectedUser = item;
        SearchText = "";
        _isDropdownVisible = false;
    }

    private void ShowDropdown()
    {
        _isDropdownVisible = true;
    }

    private void HideDropdown()
    {
        // Use a delay to allow the onClick event to be processed before hiding the dropdown
        Task.Delay(200).ContinueWith(_ =>
        {
            _isDropdownVisible = false;
            InvokeAsync(StateHasChanged);
        });
    }

    private void ToggleDropdown()
    {
        _isDropdownVisible = !_isDropdownVisible;
    }
    private IEnumerable<Status>? statuses;
    private IEnumerable<Priority>? priorities;
    protected override async Task OnInitializedAsync()
    {
        statuses = await statusService.GetStatusAsync();
        _selectedStatusId = statuses.First().Id.ToString();
        priorities = await priorityService.GetPrioritiesAsync();
        _selectedPriorityId = priorities.First().Id.ToString();
        users = await userService.GetUsersAsync();
        

    }
    
    //Status
    private string? _selectedStatusId;

    private void OnStatusChanged(ChangeEventArgs e)
    {
        _selectedStatusId = e.Value?.ToString();
    }

    //Priority
    private string? _selectedPriorityId;

    private void OnPriorityChanged(ChangeEventArgs e)
    {
        _selectedPriorityId = e.Value?.ToString();
    }

    #region Task

    private bool isLoading = false;
    private string? _errorMessageTitle="";
    private string? _errorMessageAssign="";
    public CreateTaskDTO CreateTaskModel = new CreateTaskDTO();
    // Date-related properties
    private DateTime TodayDate => DateTime.Now;
    private DateTime MinDate => DateTime.Now;
    private DateTime MaxDate => DateTime.Now.AddYears(1);
    [Parameter]
    public Func<Task> Callback { get; set; } // Callback function to refresh the task list
    
    private async Task CreateTaskAsync()
    {
        try
        {
            
            if (string.IsNullOrEmpty(CreateTaskModel.Title) && selectedUsers.IsNullOrEmpty() )
            {
                _errorMessageTitle = "Title Task is empty";
                _errorMessageAssign = "Select team members";

            }
            else if (string.IsNullOrEmpty(CreateTaskModel.Title))
            {
                _errorMessageTitle = "Title Task is empty";
            }
            else if (selectedUsers.IsNullOrEmpty())
            {
                _errorMessageAssign = "Select team members";
            }
            else
            {
                var newTask = new CreateTaskDTO()
                {
                    Title = CreateTaskModel.Title,
                    PriorityId = Guid.Parse(_selectedPriorityId),
                    StatusId = Guid.Parse(_selectedStatusId),
                    assignees = selectedUsersId,
                    UserId = "7938c8c5-38a9-4e4d-86d4-1b5a6e63f267",
                    DueDate = DateTime.UtcNow
                };
            
                var response = await taskService.CreateTaskAsync(newTask);
                isLoading = true;
                if (response.Flag)
                {
                    isLoading = false;
                    Snackbar.Add(@response.Message, Severity.Success);
                    MudDialog.Close(DialogResult.Ok(true));
                    await Callback(); // Refresh the task list
                
                }
                else
                {
                    Snackbar.Add(@response.Message, Severity.Error);
               
                }
               
            }
             
            
           

            
        }
        catch 
        {
           
        }
    }


    

    #endregion
}