@page "/users"
@inject IDialogService DialogService

@using Application.DTOs.Response
@using Application.DTOs.Response.Task
@using Application.DTOs.Response.User
@using Domain.Entity.Tasks
@using WebUI.Components.Task
@using WebUI.Components.Task.Modals
@using WebUI.Components.Task.Buttons
@using WebUI.Components.User.Modals
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Authorization
@attribute [Authorize(Roles = "Admin")]

<div class="px-4 sm:px-6 lg:px-8 mt-6 ">
    <div class="sm:flex sm:items-center">
        <div class="sm:flex-auto">
            <h1 class="text-base font-semibold leading-6 text-gray-900">Users</h1>
        </div>
        
        <div class="mt-4 sm:ml-16 sm:mt-0 sm:flex-none">
            <button @onclick="OpenAddUserModal" type="button" class="block rounded-md bg-blue-600 px-3 py-2 text-center text-sm font-semibold text-white shadow-sm hover:bg-blue-500 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-indigo-600">Add New User</button>
           
        </div>
    </div>
    
    @if (users != null)
    {
        <div class="mt-8 flow-root">
        <div class="-mx-4 -my-2 overflow-x-auto sm:-mx-6 lg:-mx-8">
            <div class="inline-block min-w-full py-2 align-middle sm:px-6 lg:px-8">
                <div class="overflow-hidden shadow ring-1 ring-black ring-opacity-5 sm:rounded-lg">
                    <table class="min-w-full divide-y divide-gray-300">
                        <thead class="bg-gray-50">
                        <tr>
                            <th scope="col" class="py-3.5 pl-4 pr-3 text-left text-sm font-semibold text-gray-900 sm:pl-6">Full Name</th>
                            <th scope="col" class="px-3 py-3.5 text-left text-sm font-semibold text-gray-900">Email</th>
                            <th scope="col" class="px-3 py-3.5 text-left text-sm font-semibold text-gray-900">Role</th>
                            <th scope="col" class="relative py-3.5 pl-3 pr-4 sm:pr-6">
                                <span class="sr-only">Edit</span>
                            </th>
                        </tr>
                        </thead>
                        <tbody class="divide-y divide-gray-200 bg-white">
                        
                        @foreach (var user in users)
                        {
                            <tr>
                                <td class="whitespace-nowrap py-4 pl-4 pr-3 text-xs font-medium text-gray-900 sm:pl-6">
                                   <span class="inline-flex h-6 w-6 items-center justify-center rounded-full bg-gray-500 mr-2">
                                            <span class="text-xs font-medium leading-none text-white">@user.Name.ToUpper().First()@user.Name.ToUpper().Substring(1, 1)</span>
                                        </span>
                                    @user.Name
                                </td>
                                <td class="whitespace-nowrap px-3 py-4 text-xs text-gray-500">@user.Email</td>
                                <td class="whitespace-nowrap px-3 py-4 text-xs text-gray-500">@user.RoleName</td>
                               
                                <td class="relative whitespace-nowrap py-4 pl-3 pr-4 text-right text-sm font-medium sm:pr-6">
                                    
                                    <a @onclick="()=>OpenEditUserModal(user)"  class="text-blue-600 hover:text-blue-600 mr-4" style="cursor: pointer">Edit</a>
                                    <a @onclick="()=>OpenDeleteUserModal(user)"  class="text-red-600 hover:text-red-600 " style="cursor: pointer">Delete</a>
                                </td>
                            </tr>
                        }

                        <!-- More people... -->
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    </div>
    }else{
        <MudSkeleton />
        <MudSkeleton Animation="Animation.False" />
        <MudSkeleton  Animation="Animation.Wave" />
    }
    
</div>


@code {
    [CascadingParameter]
    public Task<AuthenticationState>? ClientAuthState { get; set; }

    private IEnumerable<GetUsersWithRolesResponseDTO>? users;
    
    private void NavigateToTaskDetail(Guid taskId)
    {
        NavManager.NavigateTo($"/tasks/{taskId}");
    }

   
    protected override async Task OnInitializedAsync()
    {
        try
        {
            await authService.CreateAdmin();
            //If user is authenticated send to home
            if ((await ClientAuthState!).User.Identity!.IsAuthenticated == false)
            {
                NavManager.NavigateTo("/login", false, true);

            }
            
                await GetUsers();
                
              
        }
        catch
        {
            NavManager.NavigateTo("/login", false, true);
        }
    }
    
    private async Task GetUsers()
    {
        users = await userService.GetUsersAsync();
        StateHasChanged();
    }
    
    private void HandleButtonClick()
    {
        // Votre logique ici
        Console.WriteLine("Bouton cliqu√© !");
    }
    
    private void OpenAddUserModal()
    {
        var options = new DialogOptions { CloseOnEscapeKey = true, MaxWidth = MaxWidth.ExtraSmall,FullWidth = true, NoHeader = true};
        var parameters = new DialogParameters();
       parameters.Add("Callback", new Func<Task>(GetUsers));
       var res= DialogService.Show<AddUserModal>("Add User",parameters, options);
       
       
    }
    
    private void OpenEditUserModal(GetUsersWithRolesResponseDTO user)
    {
        var parameters = new DialogParameters();
        parameters.Add("user",user);
        parameters.Add("Callback",new Func<Task>(GetUsers));

        var options = new DialogOptions { CloseOnEscapeKey = true, MaxWidth = MaxWidth.ExtraSmall,FullWidth = true, NoHeader = true};


        DialogService.Show<EditTaskModal>("Update", parameters, options);
    }
    
    private void OpenDeleteUserModal(GetUsersWithRolesResponseDTO user)
    {
        var parameters = new DialogParameters<DeleteTaskModal>();
        parameters.Add(x => x.ContentText, "Do you really want to delete this task ? ");
        parameters.Add(x => x.ButtonText, "Delete");
        parameters.Add(x => x.Color, Color.Error);
        parameters.Add("user",user);
        parameters.Add("Callback",new Func<Task>(GetUsers));

        var options = new DialogOptions() { CloseButton = true, MaxWidth = MaxWidth.Medium, };

        DialogService.Show<DeleteTaskModal>("Delete", parameters, options);
    }

}