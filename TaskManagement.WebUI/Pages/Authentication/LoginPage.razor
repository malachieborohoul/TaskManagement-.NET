@page "/login"
@using System.ComponentModel.DataAnnotations
@using TaskManagement.Domain.DTOs.Request.Auth
@using TaskManagement.WebUI.Extensions
@using WebUI.Layout.Authentication
@layout AuthenticationLayout

<div class="flex min-h-full flex-col justify-center py-12 sm:px-6 lg:px-8">
    <div class="sm:mx-auto sm:w-full sm:max-w-md">
        <h2 class="mt-6 text-center text-2xl font-bold leading-9 tracking-tight text-gray-900">Sign in to your account</h2>
    </div>

    <div class="mt-10 sm:mx-auto sm:w-full sm:max-w-[480px]">
        <div class="bg-white px-6 py-12 shadow sm:rounded-lg sm:px-12">
            <EditForm Model="LoginModel" OnValidSubmit="LoginAsync">
                
                <DataAnnotationsValidator />
                
                <div class="space-y-6">
                    <div>
                        <label for="email" class="block text-sm font-medium leading-6 text-gray-900">Email address</label>
                        <div class="mt-2">
                            <input id="email" name="email" type="email" autocomplete="email" @bind="LoginModel.EmailAddress" required class="block w-full rounded-md border-0 py-1.5 text-gray-900 shadow-sm ring-1 ring-inset ring-gray-300 placeholder:text-gray-400 focus:ring-2 focus:ring-inset focus:ring-indigo-600 sm:text-sm sm:leading-6">

                        </div>
                    </div>

                    <div>
                        <label for="password" class="block text-sm font-medium leading-6 text-gray-900">Password</label>
                        <div class="mt-2">
                            <input id="password" name="password" type="password" @bind="LoginModel.Password"  autocomplete="current-password" required class="block w-full rounded-md border-0 py-1.5 text-gray-900 shadow-sm ring-1 ring-inset ring-gray-300 placeholder:text-gray-400 focus:ring-2 focus:ring-inset focus:ring-indigo-600 sm:text-sm sm:leading-6">
                        </div>
                    </div>

                    <div class="flex items-center justify-between">


                        <div class="text-sm leading-6">
                            <a href="#" class="font-semibold text-blue-600 hover:text-blue-500">Forgot password?</a>
                        </div>
                    </div>
                    

                    <div>

                        <button type="submit" class="flex w-full justify-center rounded-md bg-blue-600 px-3 py-1.5 text-sm font-semibold leading-6 text-white shadow-sm hover:bg-blue-500 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-blue-600">
                            Sign in

                        </button>

                        <ValidationSummary class="mt-2 text-sm text-red-700 list-disc " />
                        

                        
                    </div>
                </div>


            </EditForm>

            <p class="mt-10 text-center text-sm text-gray-500">
                Not a member?
                <a href="#" class="font-semibold leading-6 text-blue-600 hover:text-blue-500">Register</a>
            </p>
              

           
        </div>

       
    </div>
</div>

@code {
    public LoginDTO LoginModel { get; set; } = new();

    private async Task LoginAsync()
    {
        try
        {
            var response = await authService.LoginAsync(LoginModel);
            if (response.Flag)
            {
                var customAuthStateProvider = (CustomAuthenticationStateProvider) AuthStateProvider;
                await customAuthStateProvider.UpdateAuthenticationState(new LocalStorageDTO()
                    { Token = response.Token, Refresh = response.RefreshToken });
                NavManager. NavigateTo(uri: "home", true);
            }
        }
        catch 
        {
            
        }
    }
    
    [CascadingParameter]
    public Task<AuthenticationState>? ClientAuthState { get; set; }
    
    //When page initializes
    protected override async Task OnInitializedAsync()
    {
        try
        {
            if ((await ClientAuthState!).User.Identity!.IsAuthenticated == true)
                NavManager.NavigateTo("home", false, true);
        }
        catch { }

        
    }
    


}