@page "/tasks"
@inject IDialogService DialogService
@inject IJSRuntime JSRuntime
@using System.Security.Claims
@using Domain.Entity.Tasks
@using IdentityModel
@using TaskManagement.Application.DTOs.Response
@using TaskManagement.Domain.DTOs.Response.Task
@using WebUI.Components.Task
@using WebUI.Components.Task.Modals
@using WebUI.Components.Task.Buttons
@using TaskManagement.WebUI.Components.Task.Buttons
@using TaskManagement.WebUI.Extensions
<div class="px-4 sm:px-6 lg:px-8 mt-6 ">
    <div class="sm:flex sm:items-center">
        <div class="sm:flex-auto">
            <h1 class="text-base font-semibold leading-6 text-gray-900">Tasks</h1>
        </div>
        <AuthorizeView Roles="@Constant.Role.Admin">
            <div class="flex  ">
                <button @onclick="ExportPdf" type="button" class="inline-flex items-center gap-x-2 rounded-md bg-blue-50 px-3 py-2 text-sm font-semibold text-blue-600 shadow-sm hover:bg-blue-100 mr-4">
                    <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-4 h-4">
                        <path stroke-linecap="round" stroke-linejoin="round" d="M19.5 14.25v-2.625a3.375 3.375 0 0 0-3.375-3.375h-1.5A1.125 1.125 0 0 1 13.5 7.125v-1.5a3.375 3.375 0 0 0-3.375-3.375H8.25m2.25 0H5.625c-.621 0-1.125.504-1.125 1.125v17.25c0 .621.504 1.125 1.125 1.125h12.75c.621 0 1.125-.504 1.125-1.125V11.25a9 9 0 0 0-9-9Z" />
                    </svg>

                    Export PDF
                </button>
                <button @onclick="ExportExcel" type="button" class="inline-flex items-center gap-x-2 rounded-md bg-blue-50 px-3 py-2 text-sm font-semibold text-blue-600 shadow-sm hover:bg-blue-100 mr-4">
                    <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-4 h-4">
                        <path stroke-linecap="round" stroke-linejoin="round" d="M19.5 14.25v-2.625a3.375 3.375 0 0 0-3.375-3.375h-1.5A1.125 1.125 0 0 1 13.5 7.125v-1.5a3.375 3.375 0 0 0-3.375-3.375H8.25m2.25 0H5.625c-.621 0-1.125.504-1.125 1.125v17.25c0 .621.504 1.125 1.125 1.125h12.75c.621 0 1.125-.504 1.125-1.125V11.25a9 9 0 0 0-9-9Z" />
                    </svg>

                    Export Excel
                </button>
                
                <button @onclick="OpenAddTaskModal" type="button" class="inline-flex items-center gap-x-2  rounded-md bg-blue-600 px-3 py-2 text-center text-sm font-semibold text-white shadow-sm hover:bg-blue-500 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-indigo-600">
                    <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-4 h-4 ">
                        <path stroke-linecap="round" stroke-linejoin="round" d="M12 9v6m3-3H9m12 0a9 9 0 1 1-18 0 9 9 0 0 1 18 0Z" />
                    </svg>


                    Create Task
                </button>
              
                

            </div>
          

        </AuthorizeView>

    </div>
    <div class=" flex justify-between mt-4">


        <CustomStatusButton ButtonColorClass="bg-blue-600" ButtonText="To Do" OnClick="HandleButtonClick"/>
        <CustomStatusButton ButtonColorClass="bg-orange-600" ButtonText="In Progress" OnClick="HandleButtonClick"/>
        <CustomStatusButton ButtonColorClass="bg-green-600" ButtonText="Completed" OnClick="HandleButtonClick"/>
    </div>
    @if (tasks != null)
    {
        <div class="mt-8 flow-root">
            <div class="-mx-4 -my-2 overflow-x-auto sm:-mx-6 lg:-mx-8">
                <div class="inline-block min-w-full py-2 align-middle sm:px-6 lg:px-8">
                    <div class="overflow-hidden shadow ring-1 ring-black ring-opacity-5 sm:rounded-lg">
                        <table class="min-w-full divide-y divide-gray-300">
                            <thead class="bg-gray-50">
                            <tr>
                                <th scope="col" class="py-3.5 pl-4 pr-3 text-left text-sm font-semibold text-gray-900 sm:pl-6">Task Title</th>
                                <th scope="col" class="px-3 py-3.5 text-left text-sm font-semibold text-gray-900">Priority</th>
                                <th scope="col" class="px-3 py-3.5 text-left text-sm font-semibold text-gray-900">Created At</th>
                                <th scope="col" class="px-3 py-3.5 text-left text-sm font-semibold text-gray-900">Team</th>
                                <th scope="col" class="relative py-3.5 pl-3 pr-4 sm:pr-6">
                                    <span class="sr-only">Edit</span>
                                </th>
                            </tr>
                            </thead>
                            <tbody class="divide-y divide-gray-200 bg-white">

                            @foreach (var task in tasks)
                            {
                                // Si un admin affche toute la liste
                                if (role == Constant.Role.Admin)
                                {
                                    <tr>
                                        <td class="whitespace-nowrap py-4 pl-4 pr-3 text-sm font-medium text-gray-900 sm:pl-6">
                                            @if (task.Status.Slug == "todo")
                                            {
                                                <div class="h-3 w-3 bg-blue-600 rounded-full inline-block mr-2"></div>
                                            }
                                            else if (task.Status.Slug == "progress")
                                            {
                                                <div class="h-3 w-3 bg-orange-600 rounded-full inline-block mr-2"></div>
                                            }
                                            else if (task.Status.Slug == "completed")
                                            {
                                                <div class="h-3 w-3 bg-green-600 rounded-full inline-block mr-2"></div>
                                            }

                                            @task.Title
                                        </td>
                                        <td class="whitespace-nowrap px-3 py-4 text-sm text-gray-500">@task.Priority.Name.ToUpper().First()@task.Priority.Name.ToLower().Substring(1) Priority</td>
                                        <td class="whitespace-nowrap px-3 py-4 text-sm text-gray-500">@task.CreatedAt</td>
                                        <td class="whitespace-nowrap px-3 py-4 text-sm text-gray-500">
                                            @foreach (var item in task.Assignees)
                                            {
                                                <span class="inline-flex h-6 w-6 items-center justify-center rounded-full bg-gray-500 ">
                                                    <span class="text-xs font-medium leading-none text-white">@item.Name.ToUpper().First()@item.Name.ToUpper().Substring(1, 1)</span>
                                                </span>
                                            }
                                        </td>
                                        <td class="relative whitespace-nowrap py-4 pl-3 pr-4 text-right text-sm font-medium sm:pr-6">
                                            <a @onclick="() => NavigateToTaskDetail(task.Id)" class="text-blue-600 hover:text-blue-600 mr-4" style="cursor: pointer">View</a>
                                            <AuthorizeView Roles="@Constant.Role.Admin">
                                                <a @onclick="() => OpenEditTaskModal(task)" class="text-blue-600 hover:text-blue-600 mr-4" style="cursor: pointer">Edit</a>
                                                <a @onclick="() => OpenDeleteTaskModal(task)" class="text-red-600 hover:text-red-600 " style="cursor: pointer">Delete</a>
                                            </AuthorizeView>

                                        </td>
                                    </tr>
                                }
                                // Si un user affiche seuelemnt les taches qui lui sont assignÃ©es
                                else
                                {
                                    if (task.Assignees.Any(t => t.Id == userId))
                                    {
                                        <tr>
                                            <td class="whitespace-nowrap py-4 pl-4 pr-3 text-sm font-medium text-gray-900 sm:pl-6">
                                                @if (task.Status.Slug == "todo")
                                                {
                                                    <div class="h-3 w-3 bg-blue-600 rounded-full inline-block mr-2"></div>
                                                }
                                                else if (task.Status.Slug == "progress")
                                                {
                                                    <div class="h-3 w-3 bg-orange-600 rounded-full inline-block mr-2"></div>
                                                }
                                                else if (task.Status.Slug == "completed")
                                                {
                                                    <div class="h-3 w-3 bg-green-600 rounded-full inline-block mr-2"></div>
                                                }

                                                @task.Title
                                            </td>
                                            <td class="whitespace-nowrap px-3 py-4 text-sm text-gray-500">@task.Priority.Name.ToUpper().First()@task.Priority.Name.ToLower().Substring(1) Priority</td>
                                            <td class="whitespace-nowrap px-3 py-4 text-sm text-gray-500">@task.CreatedAt</td>
                                            <td class="whitespace-nowrap px-3 py-4 text-sm text-gray-500">
                                                @foreach (var item in task.Assignees)
                                                {
                                                    <span class="inline-flex h-6 w-6 items-center justify-center rounded-full bg-gray-500 ">
                                                        <span class="text-xs font-medium leading-none text-white">@item.Name.ToUpper().First()@item.Name.ToUpper().Substring(1, 1)</span>
                                                    </span>
                                                }
                                            </td>
                                            <td class="relative whitespace-nowrap py-4 pl-3 pr-4 text-right text-sm font-medium sm:pr-6">
                                                <a @onclick="() => NavigateToTaskDetail(task.Id)" class="text-blue-600 hover:text-blue-600 mr-4" style="cursor: pointer">View</a>
                                                <AuthorizeView Roles="@Constant.Role.Admin">
                                                    <a @onclick="() => OpenEditTaskModal(task)" class="text-blue-600 hover:text-blue-600 mr-4" style="cursor: pointer">Edit</a>
                                                    <a @onclick="() => OpenDeleteTaskModal(task)" class="text-red-600 hover:text-red-600 " style="cursor: pointer">Delete</a>
                                                </AuthorizeView>

                                            </td>
                                        </tr>
                                    }
                                }
                            }

                            <!-- More people... -->
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>
    }
    else
    {
        <MudSkeleton/>
        <MudSkeleton Animation="Animation.False"/>
        <MudSkeleton Animation="Animation.Wave"/>
    }

</div>


@code {

    [CascadingParameter] public Task<AuthenticationState>? ClientAuthState { get; set; }


    private IEnumerable<GetTaskDTO>? tasks;
    private string userId;
    private string role;

    private void NavigateToTaskDetail(Guid taskId)
    {
        NavManager.NavigateTo($"/tasks/{taskId}");
    }


    protected override async Task OnInitializedAsync()
    {
        userId = (await ClientAuthState!).User.FindFirst(JwtClaimTypes.Subject)?.Value!;
        role = (await ClientAuthState!).User.FindFirst(JwtClaimTypes.Role)?.Value!;
        //await authService.EnsureAuthenticatedAsync(LoadAllData);
        await GetTasks();
    }

    private async Task LoadAllData()
    {
        await GetTasks();
    }


    private async Task GetTasks()
    {
        Console.WriteLine("Get tasks");

        tasks = await taskService.GetTasksAsync();
        StateHasChanged();
        Console.WriteLine("Ok"+tasks.Count());

    }

    private void HandleButtonClick()
    {
        // Votre logique ici
        Console.WriteLine("Bouton cliquÃ© !");
    }

    private void OpenAddTaskModal()
    {
        var options = new DialogOptions { CloseOnEscapeKey = true, MaxWidth = MaxWidth.ExtraSmall, FullWidth = true, NoHeader = true };
        var parameters = new DialogParameters();
        parameters.Add("Callback", new Func<Task>(GetTasks));
        var res = DialogService.Show<AddTaskModal>("Add Task", parameters, options);
    }

    private void OpenEditTaskModal(GetTaskDTO task)
    {
        var parameters = new DialogParameters();
        parameters.Add("task", task);
        parameters.Add("Callback", new Func<Task>(GetTasks));

        var options = new DialogOptions { CloseOnEscapeKey = true, MaxWidth = MaxWidth.ExtraSmall, FullWidth = true, NoHeader = true };


        DialogService.Show<EditTaskModal>("Update", parameters, options);
    }

    private void OpenDeleteTaskModal(GetTaskDTO task)
    {
        var parameters = new DialogParameters<DeleteTaskModal>();
        parameters.Add(x => x.ContentText, "Do you really want to delete this task ? ");
        parameters.Add(x => x.ButtonText, "Delete");
        parameters.Add(x => x.Color, Color.Error);
        parameters.Add("task", task);
        parameters.Add("Callback", new Func<Task>(GetTasks));

        var options = new DialogOptions() { CloseButton = true, MaxWidth = MaxWidth.ExtraSmall, FullWidth = true };

        DialogService.Show<DeleteTaskModal>("Delete", parameters, options);
    }

    #region Export

    private async Task ExportPdf()
    {
        var pdfBytes = await taskService.ExportPdf();
        var base64String = Convert.ToBase64String(pdfBytes);
        const string fileName = "Tasks.pdf";

        await JSRuntime.InvokeVoidAsync("downloadFile", fileName, "application/pdf", base64String);
    }
    
    private async Task ExportExcel()
    {
        var excelBytes = await taskService.ExportExcel();
        var base64String = Convert.ToBase64String(excelBytes);
        var fileName = "Tasks.xlsx";

        await JSRuntime.InvokeVoidAsync("downloadFile", fileName,"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet", base64String);
    }
    


    #endregion

}