@using TaskManagement.Application.DTOs.Request.Task
@using TaskManagement.Application.DTOs.Response
@using Domain.Entity.Tasks
@using Microsoft.IdentityModel.Tokens
@using TaskManagement.Application.DTOs.Request.User
@using TaskManagement.Application.DTOs.Response.User
<MudDialog >
    <DialogContent>
        <EditForm Model="CreateUserModel" OnValidSubmit="UpdateUserAsync">
            <ValidationSummary class="mt-2 text-sm text-red-700 list-disc " />
            <div class="text-md font-bold mt-4">ADD USER</div>
            <div class="mt-4">
                <label for="first-name" class="block text-sm font-medium leading-6 text-gray-900">Full Name</label>
                <div class="mt-2">
                    <input  type="text" @bind="UpdateUserModel.Name" name="first-name" id="first-name" autocomplete="given-name" class="block w-full rounded-md border-0 py-1.5 text-gray-900 shadow-sm ring-1 ring-inset ring-gray-300 placeholder:text-gray-400 focus:ring-2 focus:ring-inset focus:ring-blue-600 sm:text-sm sm:leading-6">
                    <span class="text-red-600 text-xs">@_errorMessageName</span>
                </div>
            </div>
            <div class="mt-4">
                <label for="first-name" class="block text-sm font-medium leading-6 text-gray-900">Email</label>
                <div class="mt-2">
                    <input  type="email" @bind="UpdateUserModel.EmailAddress" name="email" autocomplete="given-name" class="block w-full rounded-md border-0 py-1.5 text-gray-900 shadow-sm ring-1 ring-inset ring-gray-300 placeholder:text-gray-400 focus:ring-2 focus:ring-inset focus:ring-blue-600 sm:text-sm sm:leading-6">
                    <span class="text-red-600 text-xs">@_errorMessageEmail</span>
                </div>
            </div>
         

         
                @if (roles != null)
                {
                    <div class=" ">
                        <label for="role" class="block text-sm font-medium leading-6 text-gray-900">Role</label>
                        <div class="mt-2">
                            <select id="priority" autocomplete="country-name" class="block w-full rounded-md border-0 py-1.5 text-gray-900 shadow-sm ring-1 ring-inset ring-gray-300 focus:ring-2 focus:ring-inset focus:ring-blue-600 sm:max-w-xs sm:text-sm sm:leading-6" @onchange="OnRoleChanged">
                                @foreach (var role in roles)
                                {
                                    <option value="@role.Name">@role.Name</option>
                                }
                            </select>
                        </div>
                    </div>
                }



        </EditForm>
       
    </DialogContent>
    <DialogActions>

        @if (isLoading)
        {
        <div class="mt-6 flex items-center justify-end gap-x-6 mr-4">
            <button disabled="disabled" @onclick="Cancel" type="button" class="text-sm font-semibold leading-6 text-gray-900">Cancel</button>
            <button @onclick="UpdateUserAsync" type="submit" class="rounded-md bg-blue-600 px-3 py-2 text-sm font-semibold text-white shadow-sm hover:bg-blue-500 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-blue-600">
                <svg aria-hidden="true" class="w-6 h-6 text-blue-600 animate-spin dark:text-gray-600 fill-white" viewBox="0 0 100 101" fill="none" xmlns="http://www.w3.org/2000/svg">
                    <path d="M100 50.5908C100 78.2051 77.6142 100.591 50 100.591C22.3858 100.591 0 78.2051 0 50.5908C0 22.9766 22.3858 0.59082 50 0.59082C77.6142 0.59082 100 22.9766 100 50.5908ZM9.08144 50.5908C9.08144 73.1895 27.4013 91.5094 50 91.5094C72.5987 91.5094 90.9186 73.1895 90.9186 50.5908C90.9186 27.9921 72.5987 9.67226 50 9.67226C27.4013 9.67226 9.08144 27.9921 9.08144 50.5908Z" fill="currentColor"/>
                    <path d="M93.9676 39.0409C96.393 38.4038 97.8624 35.9116 97.0079 33.5539C95.2932 28.8227 92.871 24.3692 89.8167 20.348C85.8452 15.1192 80.8826 10.7238 75.2124 7.41289C69.5422 4.10194 63.2754 1.94025 56.7698 1.05124C51.7666 0.367541 46.6976 0.446843 41.7345 1.27873C39.2613 1.69328 37.813 4.19778 38.4501 6.62326C39.0873 9.04874 41.5694 10.4717 44.0505 10.1071C47.8511 9.54855 51.7191 9.52689 55.5402 10.0491C60.8642 10.7766 65.9928 12.5457 70.6331 15.2552C75.2735 17.9648 79.3347 21.5619 82.5849 25.841C84.9175 28.9121 86.7997 32.2913 88.1811 35.8758C89.083 38.2158 91.5421 39.6781 93.9676 39.0409Z" fill="currentFill"/>
                </svg>
                Save
            </button>
        </div>
        }
        else
        {
        <div class="mt-6 flex items-center justify-end gap-x-6 mr-4">
            <button @onclick="Cancel" type="button" class="text-sm font-semibold leading-6 text-gray-900">Cancel</button>
            <button @onclick="UpdateUserAsync" type="submit" class="rounded-md bg-blue-600 px-3 py-2 text-sm font-semibold text-white shadow-sm hover:bg-blue-500 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-blue-600">Save</button>
        </div>
        }
    </DialogActions>
    
    
    
</MudDialog>

@code {
    [CascadingParameter] MudDialogInstance MudDialog { get; set; }

    void Submit() => MudDialog.Close(DialogResult.Ok(true));
    void Cancel() => MudDialog.Cancel();
    private string SearchText { get; set; }
    private GetUsersWithRolesResponseDTO SelectedUser { get; set; }
    private bool _isDropdownVisible { get; set; } = false;

    //Users
    private List<GetUsersWithRolesResponseDTO> users = new List<GetUsersWithRolesResponseDTO>();
  

    private IEnumerable<GetRoleDTO> roles = new List<GetRoleDTO>();

    public UpdateUserDTO UpdateUserModel = new UpdateUserDTO();


  
 

  

    protected override async Task OnInitializedAsync()
    {
        roles = await roleService.GetRolesAsync();
        _selectedRoleName = roles.First().Name;
        users = await userService.GetUsersAsync();

        UpdateUserModel = new UpdateUserDTO()
        {
            Name = user.Name,
            EmailAddress = user.Email,
            Role = user.RoleName
        };


    }
    
    //Status
    private string? _selectedRoleName;

  


    private void OnRoleChanged(ChangeEventArgs e)
    {
        _selectedRoleName = e.Value?.ToString();
    }

    #region Task

    private bool isLoading = false;
    private string? _errorMessageName="";
    private string? _errorMessageEmail="";
    public RegisterDTO CreateUserModel = new RegisterDTO();
    // Date-related properties
    private DateTime TodayDate => DateTime.Now;
    private DateTime MinDate => DateTime.Now;
    private DateTime MaxDate => DateTime.Now.AddYears(1);
    [Parameter]
    public Func<Task> Callback { get; set; } // Callback function to refresh the task list
    [Parameter] public GetUsersWithRolesResponseDTO user { get; set; }

    private async Task UpdateUserAsync()
    {
        try
        {
            if (string.IsNullOrEmpty(UpdateUserModel.Name) && string.IsNullOrEmpty(UpdateUserModel.EmailAddress))
            {
                _errorMessageName = "Name is empty";
                _errorMessageEmail = "Email is empty";


            }
            
            else if (string.IsNullOrEmpty(UpdateUserModel.Name)  )
            {
                _errorMessageName = "Name is empty";

            }
            else if (string.IsNullOrEmpty(UpdateUserModel.EmailAddress))
            {
                _errorMessageEmail = "Email is empty";
            }
           
            else
            {
                isLoading = true;

            Console.WriteLine(CreateUserModel.Name);
           Console.WriteLine(CreateUserModel.EmailAddress);
           Console.WriteLine(_selectedRoleName);
              

                var newUser = new UpdateUserDTO()
                {
                    Name = UpdateUserModel.Name,
                   EmailAddress = UpdateUserModel.EmailAddress,
                    Role=_selectedRoleName!,
                };
                Console.Write(newUser.ToString());
            
                var response = await userService.UpdateUserAsync(user.Id,newUser);
                if (response.Flag)
                {
                    isLoading = false;
                    Snackbar.Add(@response.Message, Severity.Success);
                    MudDialog.Close(DialogResult.Ok(true));
                    await Callback(); // Refresh the task list
                
                }
                else
                {
                    Snackbar.Add(@response.Message, Severity.Error);
               
                }
             
            }
             
            
           

            
        }
        catch 
        {
           
        }
    }


    

    #endregion
}